#!/bin/bash -l
# -l: tells script to act like a login

# Put stdout and stderr in same file
#PBS -j oe
#PBS -o logs/${PBS_JOBNAME}.o${PBS_JOBID%%.*}

# Only email about aborts
#PBS -m a
#PBS -M stephen.bush@baylorhealth.edu

# typically submit using the following for loop
# NOTE: use the full directory in the for loop to ensure files may be located.
# for f in <directory>/*.fastq;
# do
#     qsub -N "$(basename "${f%%.fastq}")" -vSEQFILE="$f" <dir>/run_velvet.pbs;
# done

##########################################
#                                        #
#   Output some useful job information.  #
#                                        #
##########################################

echo ------------------------------------------------------
echo -n 'Job is running on node '; cat $PBS_NODEFILE
echo ------------------------------------------------------
echo PBS: qsub is running on $PBS_O_HOST
echo PBS: originating queue is $PBS_O_QUEUE
echo PBS: executing queue is $PBS_QUEUE
echo PBS: working directory is $PBS_O_WORKDIR
echo PBS: execution mode is $PBS_ENVIRONMENT
echo PBS: job identifier is $PBS_JOBID
echo PBS: job name is $PBS_JOBNAME
echo PBS: node file is $PBS_NODEFILE
echo PBS: current home directory is $PBS_O_HOME
echo PBS: PATH = $PBS_O_PATH
echo ------------------------------------------------------

# directories
BINDIR="${BINDIR:-}"
SCRIPTDIR="${SCRIPTDIR:-}"
ROOTDIR="${ROOTDIR}"
OUTDIR="${OUTDIR}"
GENOME="${GENOME:-}"

# scripts and programs
velvet="/data/sbush/dev/velvet/velvet"
velvetk="perl ${SCRIPTDIR}/velvetk.pl"

# directories and files
seqdir="$(dirname "${SEQFILE}")"

seqfile1="${SEQFILE}"
seqfile2="${seqfile1/_1.f/_2.f}"
seqname="$(basename "${seqfile1%%_1.f*}")"

outdir="${OUTDIR}/${seqname}"
alignmentdir="${ROOTDIR}/bowtie2/$(basename "${GENOME}")/${seqname}"

mkdir -p "${outdir}/"

# FastQC stats
# -- check for directory
# ---- if stats file already exists, then get data from it
# ---- otherwise, unzip it, then get stats from it
fastqc_dir="${ROOTDIR}/fastqc/${seqname}"
readsizebp=100
if [ -d "${fastqc_dir}" ]; then
    fastqc_dir="${fastqc_dir}/${seqname}_1_fastqc"
    fastqc_stats="${fastqc_dir}/fastqc_data.txt"
    if [ ! -f "${fastqc_stats}" ]; then
        unzip -oq -d "$(dirname "$fastqc_dir")" $fastqc_dir;
    fi
    readsizebp="$(grep "Sequence length" ${fastqc_stats} | cut -f 2)"
    enc="$(grep "Encoding" ${fastqc_stats} | cut -f 2)"
    if [[ "$enc" == "Illumina 1.5" ]]; then
        encoding="--phred64"
    elif [[ "$enc" == *"Illumina 1.9"* ]]; then
        encoding="--phred33"
    fi
fi

# Find insertion length with minimum SD
# -- is this the right way?
inslen=150
inslen_sd=150
for f in "${alignmentdir}"/${seqname}_ins_length.txt; do
    inslen_new="$(cut -f 2 "${f}")"
    inslen_new_sd="$(cut -f 3 "${f}")"
    if [[ $inslen_new_sd < $inslen_sd ]]; then
        inslen=${inslen_new}
        inslen_sd=${inslen_new_sd}
        alignmentdir="$(dirname "$f")"
    fi
done

# estimate coverage -- 4 lines per sequence
nlines="$(wc -l < "${seqfile1}")"
nlinesperseq=4
nseq=$(($nlines/$nlinesperseq))
genomesizebp=4400000
coverage=$(( (${nseq}*${readsizebp})/${genomesizebp} ))

# estimate k
k="$(${velvetk} --size 4.4M "${seqfile1}" "${seqfile2}" --best 2>&-)"

# Quick summary
echo "Job information for '${seqname}'"
echo "------------------------------------------------------"
echo "Directories:"
echo "   root:       ${rootdir}"
echo "   alignment:  ${alignmentdir}"
echo "   assembly:   ${outdir}"
echo "   sequence:   ${seqdir}"
echo "Sequence files:"
echo "   ${seqfile1}"
echo "   ${seqfile2}"
echo "Software:"
echo "   ${velvet}[hg]"
echo "Coverage is estimated to be: ${coverage}"
echo "kmer coverage calculated as: ${k}"
echo "insert length set at:    ${inslen}"
echo "insert length sd set at: ${inslen_sd}"
echo "------------------------------------------------------"

# change to root assembly directory
# (velvet complains if too long)
cd "$(dirname ${outdir})"
assemblydir="$(basename ${outdir})"

echo "Running velveth on ${outdir}"
"${velvet}h" "${assemblydir}" $k -fastq -shortPaired -separate "${seqfile1}" "${seqfile2}"
echo "Running velvetg on ${outdir}"
"${velvet}g" "${assemblydir}" -exp_cov ${coverage} -cov_cutoff auto -ins_length ${inslen} -ins_length_sd ${inslen_sd}

echo "$(date)" >> "${outdir}/done.txt"
